package controller.commands;import model.IModel;import model.Investor;import model.PortfolioModel;import view.IView;import java.time.LocalDate;import java.util.ArrayList;import java.util.Scanner;/** * Rebalance command class. */public class RebalanceCommand implements Command {  IModel model;  IView view;  Investor investor;  Scanner scanner;  String namePortfolio;  ArrayList<String> stockNameArrayList;  ArrayList<Integer> stockPercentageArrayList;  LocalDate date;  /**   * Rebalance command constructor.   */  public RebalanceCommand(IModel model, IView view, Investor investor, Scanner scanner) {    this.model = model;    this.view = view;    this.investor = investor;    this.scanner = scanner;    this.stockNameArrayList = new ArrayList<>();    this.stockPercentageArrayList = new ArrayList<>();  }  /**   * Execute method.   */  @Override  public void execute() {    takeInputs();    investor.rebalancePortfolio(namePortfolio, stockNameArrayList, stockPercentageArrayList, date);  }  /**   * Take inputs method.   */  @Override  public void takeInputs() {    view.promptForInput("What portfolio would you like to rebalance?");    String namePortfolio = scanner.nextLine();    if (!this.investor.getPortfolios().containsKey(namePortfolio)) {      view.promptForInput("This portfolio does not exist");      execute();    } else {      this.namePortfolio = namePortfolio;    }    view.promptForInput("What is the current date? " +            "Input the date in this format: YYYY-MM-DD");    String dateInput = scanner.nextLine();    this.date = dateCreater(dateInput);    view.promptForInput("Input the stock ticker names within the portfolio."            +            " Separate each ticker name with a comma.");    String stockInputs = scanner.nextLine();    takeStockNames(stockNameHelper(stockInputs));    view.promptForInput("Input the respective percentages for each stock.");    String inputPercentages = scanner.nextLine();    int[] percentages = percentageHelper(inputPercentages);    takeStockPercentages(percentages);  }  private int[] percentageHelper(String inputs) {    String[] stringArray = inputs.split(",");    int[] intArray = new int[stringArray.length];    for (int i = 0; i < stringArray.length; i++) {      int currInt = Integer.parseInt(stringArray[i]);      intArray[i] = currInt;    }    return intArray;  }  private boolean addsToHundred(ArrayList<Integer> intArray) {    int sum = 0;    for (int i = 0; i < intArray.size(); i++) {      int currInt = intArray.get(i);      sum += currInt;    }    return sum == 100;  }  private void takeStockPercentages(int[] percentages) {    ArrayList<Integer> percentageArray = new ArrayList<>();    for (int percentage : percentages) {      if (percentage < 0 || percentage > 100) {        view.promptForInput("A percentage must be between 0 and 100");        view.promptForInput("This process will not restart");        execute();      } else {        percentageArray.add(percentage);      }    }    if (percentageArray.size() != this.stockNameArrayList.size()) {      view.promptForInput("The percentages must be "              +              "the same length of the number of stocks!");    } else if (!addsToHundred(percentageArray)) {      view.promptForInput("The percentages must add up to 100.");      view.promptForInput("This process will now restart.");      execute();    }    this.stockPercentageArrayList = percentageArray;  }  private LocalDate dateCreater(String dateInput) {    String[] dateArray = dateInput.split("-");    int year = Integer.parseInt(dateArray[0]);    int month = Integer.parseInt(dateArray[1]);    int day = Integer.parseInt(dateArray[2]);    return LocalDate.of(year, month, day);  }  private String[] stockNameHelper(String stockName) {    String[] stockArray = stockName.split(",");    return stockArray;  }  private void takeStockNames(String[] stockNames) {    ArrayList<String> stockNameArray = new ArrayList<>();    PortfolioModel portfolio = investor.getPortfolios().get(namePortfolio);    for (String inputs : stockNames) {      if (portfolio.stocks.containsKey(inputs)) {        stockNameArray.add(inputs);      } else {        view.promptForInput("This stock is not within the portfolio!");        view.promptForInput("We will now restart this process.");        execute();      }    }    this.stockNameArrayList = stockNameArray;  }}