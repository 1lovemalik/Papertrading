package controller.commands;import model.IInvestor;import model.IModel;import view.IView;import javax.swing.*;import java.util.Scanner;import java.util.Set;/** * The NumberOfPortfolios class represents a command to display the number of portfolios * an investor has and list their names. This class implements the Command interface. */public class NumberOfPortfolios implements Command {    private final IView view;    private final IInvestor investor;    /**     * Constructor for NumberOfPortfolios command.     *     * @param model    the data model interface (not used in GUI)     * @param view     the view interface for user interaction (not used in GUI)     * @param investor the investor interface containing the portfolios     * @param scanner  the scanner for reading user input (not used in GUI)     */    public NumberOfPortfolios(IModel model, IView view, IInvestor investor, Scanner scanner) {        this.view = view;        this.investor = investor;    }    @Override    public void execute() {        // Prepare portfolio names for display        Set<String> portfolioKeys = investor.getPortfolios().keySet();        StringBuilder sb = new StringBuilder();        for (String key : portfolioKeys) {            sb.append(key).append("\n");        }        String portfolioNames = sb.toString().trim(); // Remove trailing newline        // Create GUI components        JFrame frame = new JFrame("Portfolio Names");        JTextArea textArea = new JTextArea(10, 30);        textArea.setEditable(false); // Make it read-only        textArea.setText(portfolioNames); // Set portfolio names        JScrollPane scrollPane = new JScrollPane(textArea);        frame.getContentPane().add(scrollPane);        // Display the GUI        frame.pack();        frame.setLocationRelativeTo(null); // Center on screen        frame.setVisible(true);        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Close window properly    }    /**     * This method is required by the Command interface but is not used in this command.     */    @Override    public void takeInputs() {        // No input needed for this command    }}